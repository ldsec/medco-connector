// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// GetNodeStatusReader is a Reader for the GetNodeStatus structure.
type GetNodeStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodeStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodeStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetNodeStatusDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNodeStatusOK creates a GetNodeStatusOK with default headers values
func NewGetNodeStatusOK() *GetNodeStatusOK {
	return &GetNodeStatusOK{}
}

/*GetNodeStatusOK handles this case with default header values.

Node/Network status response.
*/
type GetNodeStatusOK struct {
	Payload *GetNodeStatusOKBody
}

func (o *GetNodeStatusOK) Error() string {
	return fmt.Sprintf("[GET /node/status][%d] getNodeStatusOK  %+v", 200, o.Payload)
}

func (o *GetNodeStatusOK) GetPayload() *GetNodeStatusOKBody {
	return o.Payload
}

func (o *GetNodeStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNodeStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNodeStatusDefault creates a GetNodeStatusDefault with default headers values
func NewGetNodeStatusDefault(code int) *GetNodeStatusDefault {
	return &GetNodeStatusDefault{
		_statusCode: code,
	}
}

/*GetNodeStatusDefault handles this case with default header values.

Error response.
*/
type GetNodeStatusDefault struct {
	_statusCode int

	Payload *GetNodeStatusDefaultBody
}

// Code gets the status code for the get node status default response
func (o *GetNodeStatusDefault) Code() int {
	return o._statusCode
}

func (o *GetNodeStatusDefault) Error() string {
	return fmt.Sprintf("[GET /node/status][%d] getNodeStatus default  %+v", o._statusCode, o.Payload)
}

func (o *GetNodeStatusDefault) GetPayload() *GetNodeStatusDefaultBody {
	return o.Payload
}

func (o *GetNodeStatusDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNodeStatusDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetNodeStatusDefaultBody get node status default body
swagger:model GetNodeStatusDefaultBody
*/
type GetNodeStatusDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get node status default body
func (o *GetNodeStatusDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeStatusDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeStatusDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetNodeStatusDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetNodeStatusOKBody get node status o k body
swagger:model GetNodeStatusOKBody
*/
type GetNodeStatusOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// status o k
	StatusOK bool `json:"statusOK,omitempty"`
}

// Validate validates this get node status o k body
func (o *GetNodeStatusOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetNodeStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
