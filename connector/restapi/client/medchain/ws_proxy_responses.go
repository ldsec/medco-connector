// Code generated by go-swagger; DO NOT EDIT.

package medchain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WsProxyReader is a Reader for the WsProxy structure.
type WsProxyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WsProxyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 403:
		result := NewWsProxyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewWsProxyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewWsProxyForbidden creates a WsProxyForbidden with default headers values
func NewWsProxyForbidden() *WsProxyForbidden {
	return &WsProxyForbidden{}
}

/*WsProxyForbidden handles this case with default header values.

Request is valid and user is authenticated, but not authorized to perform this action.
*/
type WsProxyForbidden struct {
	Payload *WsProxyForbiddenBody
}

func (o *WsProxyForbidden) Error() string {
	return fmt.Sprintf("[GET /medchain/ws][%d] wsProxyForbidden  %+v", 403, o.Payload)
}

func (o *WsProxyForbidden) GetPayload() *WsProxyForbiddenBody {
	return o.Payload
}

func (o *WsProxyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(WsProxyForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWsProxyDefault creates a WsProxyDefault with default headers values
func NewWsProxyDefault(code int) *WsProxyDefault {
	return &WsProxyDefault{
		_statusCode: code,
	}
}

/*WsProxyDefault handles this case with default header values.

Error response.
*/
type WsProxyDefault struct {
	_statusCode int

	Payload *WsProxyDefaultBody
}

// Code gets the status code for the ws proxy default response
func (o *WsProxyDefault) Code() int {
	return o._statusCode
}

func (o *WsProxyDefault) Error() string {
	return fmt.Sprintf("[GET /medchain/ws][%d] wsProxy default  %+v", o._statusCode, o.Payload)
}

func (o *WsProxyDefault) GetPayload() *WsProxyDefaultBody {
	return o.Payload
}

func (o *WsProxyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(WsProxyDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*WsProxyDefaultBody ws proxy default body
swagger:model WsProxyDefaultBody
*/
type WsProxyDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this ws proxy default body
func (o *WsProxyDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WsProxyDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WsProxyDefaultBody) UnmarshalBinary(b []byte) error {
	var res WsProxyDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*WsProxyForbiddenBody ws proxy forbidden body
swagger:model WsProxyForbiddenBody
*/
type WsProxyForbiddenBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this ws proxy forbidden body
func (o *WsProxyForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WsProxyForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WsProxyForbiddenBody) UnmarshalBinary(b []byte) error {
	var res WsProxyForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
