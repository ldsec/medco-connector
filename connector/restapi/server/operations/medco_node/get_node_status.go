// Code generated by go-swagger; DO NOT EDIT.

package medco_node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ldsec/medco/connector/restapi/models"
)

// GetNodeStatusHandlerFunc turns a function with the right signature into a get node status handler
type GetNodeStatusHandlerFunc func(GetNodeStatusParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNodeStatusHandlerFunc) Handle(params GetNodeStatusParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetNodeStatusHandler interface for that can handle valid get node status params
type GetNodeStatusHandler interface {
	Handle(GetNodeStatusParams, *models.User) middleware.Responder
}

// NewGetNodeStatus creates a new http.Handler for the get node status operation
func NewGetNodeStatus(ctx *middleware.Context, handler GetNodeStatusHandler) *GetNodeStatus {
	return &GetNodeStatus{Context: ctx, Handler: handler}
}

/*GetNodeStatus swagger:route GET /node/status medco-node getNodeStatus

Get info about node status.

*/
type GetNodeStatus struct {
	Context *middleware.Context
	Handler GetNodeStatusHandler
}

func (o *GetNodeStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetNodeStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetNodeStatusDefaultBody get node status default body
//
// swagger:model GetNodeStatusDefaultBody
type GetNodeStatusDefaultBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get node status default body
func (o *GetNodeStatusDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeStatusDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeStatusDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetNodeStatusDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetNodeStatusOKBody get node status o k body
//
// swagger:model GetNodeStatusOKBody
type GetNodeStatusOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// status o k
	StatusOK bool `json:"statusOK,omitempty"`
}

// Validate validates this get node status o k body
func (o *GetNodeStatusOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNodeStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNodeStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetNodeStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
